<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="TakePaymentAuthorizeTest">
        <annotations>
            <testCaseId value="TPM-07"/>
            <features value="Take Payment"/>
            <stories value="Take full payment with Authorize.net"/>
            <title value="Able to take full payment with payment method: Authorize.net"/>
            <description value="Able to take full payment with payment method: Authorize.net"/>
            <severity value="CRITICAL"/>
            <!-- <group value="pwapos"/>
            <group value="takePayment"/>
            <group value="takePaymentAuthorize"/>
            <group value="takePaymentAuthorizeFull"/> -->
        </annotations>

        <before>
            <createData stepKey="configAuthorizeEnable" entity="config_authorize_enable" />
            <createData stepKey="configAuthorizeApiLogin" entity="config_authorize_api_login" />
            <createData stepKey="configAuthorizeTransactionKey" entity="config_authorize_transaction_key" />
            <createData stepKey="configAuthorizeClientId" entity="config_authorize_client_id" />
            <createData stepKey="configAuthorizeSandBox" entity="config_authorize_is_sandbox" />

            <actionGroup ref="PosOnCheckoutPage" stepKey="PosOnCheckoutPage"/>
            <actionGroup ref="AddProductAndCharge" stepKey="AddProductAndCharge">
                <argument name="dataProduct" value="pos_simple_product_2" />
            </actionGroup>

            <waitForElementVisible selector="{{PosCheckoutPaymentSection.cash}}" time="120" stepKey="waitCashPaymentVisible"/>

            <actionGroup ref="PosPaymentEnterCash" stepKey="enterCash">
                <argument name="amount" value="{{authorize_take_payment_full_pos_simple_product_2.prePaidAmount}}"/>
            </actionGroup>

            <!--Partial button and confirm order-->
            <waitForElementVisible selector="{{PosCheckoutPaymentSection.addPayment}}" time="120" stepKey="addPaymentCheck"/>
            <click selector="{{PosCheckoutPaymentSection.partial}}" stepKey="clickPartial"/>

            <waitForElementVisible selector="{{PosCheckoutPaymentSection.popupCompleteOrder}}" time="120" stepKey="popupCompleteWait"/>
            <!--End of partial button and confirm order-->
            <actionGroup ref="DisablePrintPopup" stepKey="DisablePrintPopup"/>
            <wait time="1" stepKey="waitBeforeClickComplete1"/>
            <click selector="{{PosCheckoutPaymentSection.confirmOrderBtn}}" stepKey="completeOrder"/>
            <waitForElementNotVisible selector="{{PosCheckoutPaymentSection.popupCompleteOrder}}" time="120" stepKey="popupCompleteWaitNotVisible"/>
            <waitForElementVisible selector="{{ProductListSection.toastSuccessMessage}}" time="120" stepKey="seeToastSuccessShow"/>

        </before>

        <actionGroup ref="GetOrderIdFromToast" stepKey="GetOrderIdFromToast"/>
        <actionGroup ref="GoToFirstOrderDetailFrontend" stepKey="GoToFirstOrderDetailFrontend">
            <argument name="orderId" value="{$orderIdGetOrderIdFromToast}"/>
        </actionGroup>

        <click selector="{{OrderDetailSection.takePaymentButton}}" stepKey="clickTakePayment"/>

        <waitForElementVisible selector="{{PosCheckoutPaymentSection.authorize}}" time="120" stepKey="waitAuthorizePaymentVisible"/>
        <click selector="{{PosCheckoutPaymentSection.authorize}}" stepKey="clickAuthorize"/>
        <waitForElementVisible selector="{{PosCheckoutPaymentSection.amount}}" time="120" stepKey="waitForEditPaymentPageVisible"/>

        <actionGroup ref="FillCreditCard" stepKey="findCreditCardNumber">
            <argument name="credit_card" value="authorize_credit_card"/>
        </actionGroup>

        <waitForElementVisible selector="{{CheckoutSection.CompleteOrder}}" time="120" stepKey="waitCompleteOrderPageVisible"/>

        <seeElement selector="{{PosCheckoutPaymentSection.iconAuthorizeForPos}}" stepKey="findAuthorizeOnPaymentList" />

        <!-- Check: Display Remaining amount = $0.00 -->
        <grabTextFrom selector="{{PosCheckoutPaymentSection.totalLabel}}" stepKey="grabTotalPaymentLabel"/>
        <grabTextFrom selector="{{PosCheckoutPaymentSection.totalValue}}" stepKey="grabTotalPaymentValue"/>
        <assertEquals message="Remaining total label is correct." stepKey="compareRemainingTotalLabel">
            <expectedResult type="string">Remaining</expectedResult>
            <actualResult type="variable">grabTotalPaymentLabel</actualResult>
        </assertEquals>
        <assertEquals message="Remaining total value is correct." stepKey="compareRemainingTotalValue">
            <expectedResult type="string">{{authorize_take_payment_full_pos_simple_product_2.remaining}}</expectedResult>
            <actualResult type="variable">grabTotalPaymentValue</actualResult>
        </assertEquals>
        <!-- End Check: Display Remaining amount = $0.00 -->

        <!-- Check: Show the button that named as Complete Payment -->
        <grabTextFrom selector="{{CheckoutSection.CompleteOrder}}" stepKey="grabCompleteButtonLabel"/>
        <assertEquals message="Complete button label is correct." stepKey="compareCompleteButtonLabel">
            <expectedResult type="string">Complete Payment</expectedResult>
            <actualResult type="variable">grabCompleteButtonLabel</actualResult>
        </assertEquals>
        <!-- End Check: Show the button that named as Complete Payment -->
        <click selector="{{CheckoutSection.CompleteOrder}}" stepKey="completePayment"/>

        <waitForElementVisible selector="{{CheckoutSection.authorizeLoader}}" time="120" stepKey="waitAuthorizeLoaderVisible"/>
        <waitForElementNotVisible selector="{{CheckoutSection.authorizeLoader}}" time="120" stepKey="waitAuthorizeLoaderNotVisible"/>

        <waitForElementNotVisible selector="{{CheckoutSection.CompleteOrder}}" time="120" stepKey="waitCompletePaymentPageNotVisible"/>
        <!--Check success massage-->
        <waitForElementVisible selector="{{ToastSection.message}}" time="120" stepKey="waitForSuccessMessage"/>
        <grabTextFrom selector="{{ToastSection.message}}" stepKey="grabMessageText"/>
        <assertContains message="Check message is correct." stepKey="checkMassageIsCorrect1">
            <expectedResult type="string">{{authorize_take_payment_full_pos_simple_product_2.message}}</expectedResult>
            <actualResult type="variable">grabMessageText</actualResult>
        </assertContains>
        <!--End: Check success massage-->

        <wait time="1" stepKey="wait1"/>
        <!--Check payment status-->
        <grabTextFrom selector="{{OrderDetailSection.paymentStatus}}" stepKey="grabPaymentStatus"/>
        <assertEquals message="Assert payment status is correct" stepKey="assertPaymentStatus">
            <expectedResult type="string">{{authorize_take_payment_full_pos_simple_product_2.paymentStatus}}</expectedResult>
            <actualResult type="variable">grabPaymentStatus</actualResult>
        </assertEquals>
        <!--End: Check payment status-->
        <!--Check Total Paid-->
        <grabTextFrom selector="{{OrderDetailSection.grandTotal}}" stepKey="grabGrandTotal"/>
        <grabTextFrom selector="{{OrderDetailSection.totalPaid}}" stepKey="grabTotalPaid"/>
        <assertEquals message="Assert Grand Total = Total Paid" stepKey="assertTotalPaid">
            <expectedResult type="variable">grabGrandTotal</expectedResult>
            <actualResult type="variable">grabTotalPaid</actualResult>
        </assertEquals>
        <!--End: Check Total Paid-->
    </test>
</tests>
